class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == nullptr) return list2;
        if(list2 == nullptr) return list1;
        ListNode* head = list2->val <= list1->val ? list2 : list1;
        ListNode* prev = nullptr;

        while(list1 != nullptr || list2 != nullptr) {
            if(list1 == nullptr) {
                break;
            }
            if(list2 == nullptr) {
                prev->next = list1;
                break;
            }

            if(list1->val >= list2->val) {
                if(list2->next == nullptr || list2->next->val >= list1->val) { // put list1 node after list2 node
                    prev = list1;
                    ListNode* nextList1 = list1->next;
                    list1->next = list2->next;
                    list2->next = list1;

                    list1 = nextList1;
                    list2 = list2->next->next;
                } else { // move list2 pointer
                    prev = list2;
                    list2 = list2->next;
                }
            } else { // put list1 node before list2 node
                if(prev == nullptr) {
                    prev = list1;
                    ListNode* nextList1 = list1->next;
                    list1->next = list2;
                    list1 = nextList1;
                } else {
                    ListNode* nextList1 = list1->next;
                    prev->next = list1;
                    prev = list1;
                    list1->next = list2;

                    list1 = nextList1;
                }

            }
        }

        return head;
    }
};
